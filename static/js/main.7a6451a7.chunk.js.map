{"version":3,"sources":["components/numberInput.js","components/output.js","App.js","serviceWorker.js","index.js"],"names":["numberInput","props","numbers","map","index","key","type","value","onChange","changed","ops","iterables","repeat","argv","Array","prototype","slice","call","arguments","argc","length","isNaN","copies","i","push","reduce","accumulator","tmp","forEach","a0","a1","concat","product","opMap","add","sub","mul","div","opFunc","a","b","permutator","inputArr","result","permute","arr","m","curr","next","splice","is24","n1","n2","n3","n4","middle2","numList","ans","parseFloat","numLists","list","l","ls","JSON","stringify","indexOf","x","parse","uniqueList","nums","op1","op2","op3","opFunc1","opFunc2","opFunc3","firstNum","secondNum","numStr","op","toString","num1","num2","num3","num4","opr1","opr2","opr3","expression1","expression2","expression3","output","num","showState","ListGroup","variant","Item","App","state","1","2","3","4","showAns","buttonStyle","padding","margin","showAnsHandler","bool","setState","randomNumberGenerator","Math","round","random","event","target","action","this","className","style","numberHandler","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a6451a7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst numberInput = props => {\n  const numbers = props.numbers;\n  return (\n    <div>\n      <p>Rule: Given 4 numbers, find an arrangement of these four numbers and the arithmetic operations (× + − ÷) to make the value 24</p>\n      {[1, 2, 3, 4].map(index => (\n        <input\n          key = {index}\n          type=\"number\"\n          value={numbers[index]}\n          onChange={props.changed(index)}\n        />\n      ))}\n    \n    </div>\n  );\n};\n\nexport default numberInput;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\n/**\n * return a list of permutations, given that repetition is allowed.\n * @param {a list of elements to be grouped} iterables \n * @param {the size of the products} repeat \n */\nfunction product(iterables, repeat) {\n  var argv = Array.prototype.slice.call(arguments),\n    argc = argv.length;\n  if (argc === 2 && !isNaN(argv[argc - 1])) {\n    var copies = [];\n    for (var i = 0; i < argv[argc - 1]; i++) {\n      copies.push(argv[0].slice()); // Clone\n    }\n    argv = copies;\n  }\n  return argv.reduce(\n    function tl(accumulator, value) {\n      var tmp = [];\n      accumulator.forEach(function(a0) {\n        value.forEach(function(a1) {\n          tmp.push(a0.concat(a1));\n        });\n      });\n      return tmp;\n    },\n    [[]]\n  );\n}\n\nvar opList = [\"div\", \"add\", \"sub\", \"mul\"];\nvar ops = product(opList, 3);\nvar opMap = { add: \"+\", sub: \"-\", mul: \"x\", div: \"/\" };\n\nvar opFunc = {\n  add: (a, b) => a + b,\n  sub: (a, b) => a - b,\n  mul: (a, b) => a * b,\n  div: (a, b) => a / b\n};\n\n\n/**\n * get rid of same elements in the list.\n * @param {a list contains repeated elements} list \n */\nfunction uniqueList(list) {\n  let ans = [];\n  for (var l of list) {\n    let ls = JSON.stringify(l);\n    if (ans.indexOf(ls) < 0) {\n      ans.push(ls);\n    }\n  }\n  return ans.map(x => JSON.parse(x));\n}\n\n\n/**\n * taken into the consideration of numbers' order\n * @param {a list of operations} inputArr \n */\nconst permutator = inputArr => {\n  let result = [];\n  const permute = (arr, m = []) => {\n    if (arr.length === 0) {\n      result.push(m);\n    } else {\n      for (let i = 0; i < arr.length; i++) {\n        let curr = arr.slice();\n        let next = curr.splice(i, 1);\n        permute(curr.slice(), m.concat(next));\n      }\n    }\n  };\n\n  permute(inputArr);\n\n  return result;\n};\n\nfunction is24(map) {\n  var middle2 = [];\n  var numList = [];\n  var n1, n2, n3, n4;\n  var ans = [];\n\n  for (var key in map) {\n    numList.push(parseFloat(map[key]));\n  }\n  var numLists = uniqueList(permutator(numList));\n  for (var nums of numLists) {\n    [n1, n2, n3, n4] = nums;\n    for (var op of ops) {\n      var op1, op2, op3, opFunc1, opFunc2, opFunc3;\n      var result = 0;\n      var firstNum, secondNum, numStr;\n      [op1, op2, op3] = op;   //a list of ops name\n      [opFunc1,opFunc2,opFunc3] = op.map(x=>opFunc[x]); //a list of ops function\n\n      // ((n1 op1 n2) op2 n3) op3 n4\n      var expression1 = (num1=n1,num2=n2,num3=n3,num4=n4,opr1=op1,opr2=op2,opr3=op3) => `((${num1}${opMap[opr1]}${num2})${opMap[opr2]}${num3})${opMap[opr3]}${num4}`;\n      firstNum = opFunc1(n1, n2);\n      secondNum = opFunc2(firstNum,n3);\n      result = opFunc3(secondNum,n4);\n      // result = opFunc3(opFunc2(opFunc1(n1, n2), n3), n4);\n      // console.log(firstNum.toString()+\"\\\\\"+secondNum.toString());\n      numStr = firstNum.toString()+\"\\\\\"+secondNum.toString()\n      if (result === 24 && middle2.indexOf(numStr)===-1) {\n        middle2.push(numStr);\n        ans.push(expression1());\n      }\n\n      //(n1 op1 (n2 op2 (n3 op3 n4)))\n      var expression2 = (num1=n1,num2=n2,num3=n3,num4=n4,opr1=op1,opr2=op2,opr3=op3) =>`${num1}${opMap[opr1]}(${num2}${opMap[opr2]}(${num3}${opMap[opr3]}${num4}))`\n      firstNum = opFunc3(n3, n4);\n      secondNum = opFunc2(n2,firstNum);\n      result = opFunc1(n1, opFunc2(n2, opFunc3(n3, n4)));\n      numStr = firstNum.toString()+\"\\\\\"+secondNum.toString();\n      if (result === 24 && middle2.indexOf(numStr)===-1) {\n        middle2.push(numStr);\n        ans.push(expression2());\n      }\n\n      //(n1 op1 n2) op2 (n3 op3 n4)\n      var expression3 = (num1=n1,num2=n2,num3=n3,num4=n4,opr1=op1,opr2=op2,opr3=op3) => `(${num1}${opMap[opr1]}${num2})${opMap[opr2]}(${num3}${opMap[opr3]}${num4})`\n      firstNum = opFunc1(n1, n2);\n      secondNum = opFunc3(n3,n4);\n      result = opFunc2(firstNum,secondNum);\n      // result = opFunc2(opFunc1(n1, n2), opFunc3(n3, n4));\n      if (result === 24&&middle2.indexOf(numStr)===-1) {\n        middle2.push(numStr);\n        ans.push(expression3());\n      }\n    }\n  }\n\n  return ans;\n}\n\nconst result = props => {\n  var output = null;\n  var ans = is24(props.num);\n  if (props.showState) {\n    if (ans.length === 0) {\n      output = <h6>Yikes. I can't find a solution!</h6>;\n    } else {\n      output = (\n        <ListGroup variant=\"flush\">\n          {ans.map((x, index) => (\n            <ListGroup.Item key={index}>{x}</ListGroup.Item>\n          ))}\n        </ListGroup>\n      );\n    }\n  }\n\n  return <div>{output}</div>;\n};\n\nexport default result;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NumberInput from \"./components/numberInput\";\nimport Result from \"./components/output\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from \"react-bootstrap/Button\";\n//============================================================\n\nclass App extends Component {\n  state = { numbers: { 1: 0, 2: 0, 3: 0, 4: 0 }, showAns: false };\n\n  buttonStyle = {\n    padding: \"5px\",\n    margin: \"15px\"\n  }\n\n\n  /**\n   * \n   * @param {*} num: the index of the number to be changed\n   * return a lambda function that will update the number\n   */\n  numberHandler(num) {\n    return event => {\n      let numList = { ...this.state.numbers };\n      numList[num] = event.target.value;\n      this.setState({ numbers: numList });\n    };\n  }\n\n\n  /**\n   * a lambda function that toggle the answer\n   */\n  showAnsHandler = () => {\n    var bool = this.state.showAns;\n    this.setState({ showAns: !bool });\n  };\n  \n  /**\n   * a lambda function that will randomly choose four numbers ranging from 1 to 13 \n   */\n  randomNumberGenerator = () =>{\n    let numList = {...this.state.numbers}\n    for (var key in numList){\n      numList[key] = Math.round(Math.random() * 12) + 1;\n    }\n    this.setState({numbers:numList});\n  }\n\n\n  render() {\n    let action = \"Show Answer\";\n    if(this.state.showAns){\n      action = \"Conceal Answer\";\n    }\n\n    return (\n      <div className=\"App\">\n        <h1 style = {this.buttonStyle}>Game 24</h1>\n        <NumberInput\n          numbers={this.state.numbers}\n          changed={index => this.numberHandler(index)}\n        />\n        <Button variant = \"success\" onClick = {this.randomNumberGenerator}>Random</Button>\n        <Button variant=\"primary\" onClick={this.showAnsHandler} style={this.buttonStyle}>{action}</Button>\n        <Result num={this.state.numbers} showState={this.state.showAns} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}